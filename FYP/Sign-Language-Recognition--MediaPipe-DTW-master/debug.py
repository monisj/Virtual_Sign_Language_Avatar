# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'debugscreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
import cv2
import mediapipe 
#import main
import numpy as np
from utils.dataset_utils import load_dataset, load_reference_signs,new_videos_load_dataset
from utils.mediapipe_utils import mediapipe_detection
from sign_recorder import SignRecorder
from webcam_manager import WebcamManager
from pynput import keyboard
import pathlib
import time
import subprocess

class Ui_DebugWindow(object):
    def setupUi(self, DebugWindow,path_v,path_c):
        data_path=pathlib.Path.cwd().joinpath('utils\Acc')
        self.pathv=path_v
        self.path_c=path_c
        DebugWindow.setObjectName("DebugWindow")
        DebugWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(DebugWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.VideoWidget = QtWidgets.QWidget(self.frame)
        self.VideoWidget.setObjectName("VideoWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.VideoWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        #self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('vids/gigabyte.mp4')))
        self.videoWidget = QVideoWidget()
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        self.verticalLayout_3.addWidget(self.videoWidget)
        self.frame_5 = QtWidgets.QFrame(self.VideoWidget)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.frame_5)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setIcon(QtGui.QIcon('play-button.png'))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.horizontalSlider = QtWidgets.QSlider(self.frame_5)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout_2.addWidget(self.horizontalSlider)
        self.verticalLayout_3.addWidget(self.frame_5)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout.addWidget(self.VideoWidget)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.formLayout = QtWidgets.QFormLayout(self.frame_3)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.label_2)
        self.verticalLayout.addWidget(self.frame_3)
        self.horizontalLayout.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.CameraFrame = QtWidgets.QFrame(self.frame_2)
        self.CameraFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.CameraFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CameraFrame.setObjectName("CameraFrame")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.CameraFrame)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.CameraFrame)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.verticalLayout_2.addWidget(self.CameraFrame)
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.frame_4)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.frame_2)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 900, 91, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(950, 660, 271, 91))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(2)
        item1 = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item1)
        item2 = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item2)
        item3 = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item3)
        item4 = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item4)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 1, item)
        
        DebugWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(DebugWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        DebugWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(DebugWindow)
        self.statusbar.setObjectName("statusbar")
        DebugWindow.setStatusBar(self.statusbar)

        self.retranslateUi(DebugWindow)
        QtCore.QMetaObject.connectSlotsByName(DebugWindow)

        #####################################
        self.camerathread = cameraThread()
        

        self.camerathread.start()
        self.camerathread.ImageUpdate.connect(self.ImageUpdateSlot)
        self.camerathread.accuracyUpdate.connect(self.accuracyUpdateSlot)
        self.camerathread.accuracy_zero.connect(self.accuracy_zero)

        self.pushButton.clicked.connect(self.play)
        self.horizontalSlider.sliderMoved.connect(self.setPosition)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)
        
        self.playlist = QMediaPlaylist()
        self.playlist.addMedia(QMediaContent(QUrl.fromLocalFile(f'videos/{path_v}.mp4')))
        self.playlist.setPlaybackMode(self.playlist.Loop)
        self.mediaPlayer.setPlaylist(self.playlist)

        
   
    webcam_manager = WebcamManager()

    def accuracy_zero(self):
        self.label_2.setText('0')
        
    def ImageUpdateSlot(self, Image):
        self.label_4.setPixmap(QPixmap.fromImage(Image))
        
        
    def accuracyUpdateSlot(self):
        print(self.pathv)
        data_path=pathlib.Path.cwd().joinpath('utils\Acc')
        f=open(f'{data_path}\{self.pathv}.txt','r')
        for x in f:
          pass
        f.close()
        print(x)
        self.label_2.setText(str(x))

        if float(x)>80:
            __sortingEnabled = self.tableWidget.isSortingEnabled()
            self.tableWidget.setSortingEnabled(False)
            item = self.tableWidget.item(0, 0)
            item.setText("1")
            item = self.tableWidget.item(0, 1)
            item.setText("0")
            item = self.tableWidget.item(1, 0)
            item.setText("0")
            item = self.tableWidget.item(1, 1)
            item.setText("0")
            self.tableWidget.setSortingEnabled(__sortingEnabled)
        elif float(x)>50 and int(x)<80:
            __sortingEnabled = self.tableWidget.isSortingEnabled()
            self.tableWidget.setSortingEnabled(False)
            item = self.tableWidget.item(0, 0)
            item.setText("0")
            item = self.tableWidget.item(0, 1)
            item.setText("1")
            item = self.tableWidget.item(1, 0)
            item.setText("0")
            item = self.tableWidget.item(1, 1)
            item.setText("0")
            self.tableWidget.setSortingEnabled(__sortingEnabled)
        elif float(x)>30 and int(x)<50:
            __sortingEnabled = self.tableWidget.isSortingEnabled()
            self.tableWidget.setSortingEnabled(False)
            item = self.tableWidget.item(1, 0)
            item = self.tableWidget.item(0, 0)
            item.setText("0")
            item = self.tableWidget.item(0, 1)
            item.setText("0")
            item = self.tableWidget.item(1, 0)
            item.setText("1")
            item = self.tableWidget.item(1, 1)
            item.setText("0")
            self.tableWidget.setSortingEnabled(__sortingEnabled)
        else:
            __sortingEnabled = self.tableWidget.isSortingEnabled()
            self.tableWidget.setSortingEnabled(False)
            item = self.tableWidget.item(1, 1)
            item = self.tableWidget.item(0, 0)
            item.setText("0")
            item = self.tableWidget.item(0, 1)
            item.setText("0")
            item = self.tableWidget.item(1, 0)
            item.setText("0")
            item = self.tableWidget.item(1, 1)
            item.setText("1")
            self.tableWidget.setSortingEnabled(__sortingEnabled)
        
    
    def play(self):
            if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
                self.mediaPlayer.pause()
            else:
                self.mediaPlayer.play()
 
    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.pushButton.setIcon(QtGui.QIcon('pause-button.png'))
        else:
            self.pushButton.setIcon(QtGui.QIcon('play-button.png'))

    def positionChanged(self, position):
        self.horizontalSlider.setValue(position)

    def durationChanged(self, duration):
        self.horizontalSlider.setRange(0, duration)

    def setPosition(self, position):
        self.mediaPlayer.setPosition(position)

    def back(self):
        DebugWindow.close()
        self.camerathread.stop()
        subprocess.check_output(["python", 'Explorer.py', str(self.path_c)])
        
    def retranslateUi(self, DebugWindow):
        _translate = QtCore.QCoreApplication.translate
        DebugWindow.setWindowTitle(_translate("DebugWindow", "DebugWindow"))
        self.label.setText(_translate("DebugWindow", "Accuracy:"))
        self.pushButton_2.setText(_translate("Dialog", "Back"))
        
        item1 = self.tableWidget.verticalHeaderItem(0)
        item1.setText(_translate("DebugWindow", "TP"))
        item2 = self.tableWidget.verticalHeaderItem(1)
        item2.setText(_translate("DebugWindow", "FN"))
        item3 = self.tableWidget.horizontalHeaderItem(0)
        item3.setText(_translate("DebugWindow", "TP"))
        item4 = self.tableWidget.horizontalHeaderItem(1)
        item4.setText(_translate("DebugWindow", "FN"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.item(0, 0)
        item.setText(_translate("DebugWindow", "0"))
        item = self.tableWidget.item(0, 1)
        item.setText(_translate("DebugWindow", "0"))
        item = self.tableWidget.item(1, 0)
        item.setText(_translate("DebugWindow", "0"))
        item = self.tableWidget.item(1, 1)
        item.setText(_translate("DebugWindow", "0"))
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        #self.label_2.setText(_translate("DebugWindow", "TextLabel"))
        self.pushButton_2.clicked.connect(self.back)
    

# class cameraThread(QThread):
#     ImageUpdate = pyqtSignal(QImage)
#     def run(self):
#         self.ThreadActive = True
#         Capture = cv2.VideoCapture(0)
#         while self.ThreadActive:
#             ret, frame = Capture.read()
#             if ret:
#                 Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#                 FlippedImage = cv2.flip(Image, 1)
#                 ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
#                 #Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
#                 i = ConvertToQtFormat.copy()
#                 #self.ImageUpdate.emit(ConvertToQtFormat)
#                 self.ImageUpdate.emit(i)
class cameraThread(QThread):

    ImageUpdate = pyqtSignal(QImage)
    accuracyUpdate=pyqtSignal(str)
    accuracy_zero=pyqtSignal(str)
    
    def on_release(self,key):
        self.accuracy_zero.emit('')
        try:
            if key.char == 'r':
                sign_recorder.record()
                time.sleep(16)
                self.accuracyUpdate.emit('')
        except:
            pass
        
        
        
        
        


    def run(self):
        self.ThreadActive = True
        webcam_manager = WebcamManager()
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        listener = keyboard.Listener(
                    on_release=self.on_release)
        
        listener.start()
        
        
        with mediapipe.solutions.holistic.Holistic(
            min_detection_confidence=0.3, min_tracking_confidence=0.3) as holistic:
            
            while self.ThreadActive:

                # Read feed
                ret, frame = cap.read()

                # Make detections
                image, results = mediapipe_detection(frame, holistic)

                # Process results
                sign_detected, is_recording = sign_recorder.process_results(results)

                # Update the frame (draw landmarks & display result)
                FlippedImage=webcam_manager.update(frame, results, sign_detected, is_recording)
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_BGR888)
                self.ImageUpdate.emit(ConvertToQtFormat)
                


                # pressedKey = cv2.waitKey(1) & 0xFF
                # if pressedKey == ord("r"):  # Record pressing r
                #     sign_recorder.record()
        
                # try:
                #     #print(accuracy)
                #     self.accuracyUpdate.emit(accuracy)
                # except:
                #     pass

        
            
    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    ast=sys.argv[1]
    ast2=sys.argv[2]
    path=ast
    path2=ast2
    print(path)
    print(path2)
    videos = load_dataset()
    reference_signs = load_reference_signs(videos)
    sign_recorder = SignRecorder(reference_signs)
    app = QtWidgets.QApplication(sys.argv)
    DebugWindow = QtWidgets.QMainWindow()
    ui = Ui_DebugWindow()
    ui.setupUi(DebugWindow,path,path2)
    DebugWindow.showMaximized()
    sys.exit(app.exec_())
