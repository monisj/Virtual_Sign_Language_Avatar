# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'debugscreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
import cv2
import mediapipe as mp
import model_Test as mt
import numpy as np


class Ui_DebugWindow(object):
    def setupUi(self, DebugWindow):
        DebugWindow.setObjectName("DebugWindow")
        DebugWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(DebugWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.VideoWidget = QtWidgets.QWidget(self.frame)
        self.VideoWidget.setObjectName("VideoWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.VideoWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('a.mp4')))
        self.videoWidget = QVideoWidget()
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        self.verticalLayout_3.addWidget(self.videoWidget)
        self.frame_5 = QtWidgets.QFrame(self.VideoWidget)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.frame_5)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setIcon(QtGui.QIcon('play-button.png'))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.horizontalSlider = QtWidgets.QSlider(self.frame_5)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout_2.addWidget(self.horizontalSlider)
        self.verticalLayout_3.addWidget(self.frame_5)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout.addWidget(self.VideoWidget)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.formLayout = QtWidgets.QFormLayout(self.frame_3)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.label_2)
        self.verticalLayout.addWidget(self.frame_3)
        self.horizontalLayout.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.CameraFrame = QtWidgets.QFrame(self.frame_2)
        self.CameraFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.CameraFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CameraFrame.setObjectName("CameraFrame")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.CameraFrame)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.CameraFrame)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.verticalLayout_2.addWidget(self.CameraFrame)
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.frame_4)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.verticalLayout_2.addWidget(self.frame_4)
        self.horizontalLayout.addWidget(self.frame_2)
        DebugWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(DebugWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        DebugWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(DebugWindow)
        self.statusbar.setObjectName("statusbar")
        DebugWindow.setStatusBar(self.statusbar)

        self.retranslateUi(DebugWindow)
        QtCore.QMetaObject.connectSlotsByName(DebugWindow)

        #####################################
        self.camerathread = cameraThread()
        self.label_2.setText('')

        self.camerathread.start()
        self.camerathread.ImageUpdate.connect(self.ImageUpdateSlot)
        self.camerathread.accuracyUpdate.connect(self.accuracyUpdateSlot)

        self.pushButton.clicked.connect(self.play)
        self.horizontalSlider.sliderMoved.connect(self.setPosition)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)


    def ImageUpdateSlot(self, Image):
        self.label_4.setPixmap(QPixmap.fromImage(Image))
    def accuracyUpdateSlot(self, text):
        self.label_2.setText(text)
    
    def play(self):
            if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
                self.mediaPlayer.pause()
            else:
                self.mediaPlayer.play()
 
    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.pushButton.setIcon(QtGui.QIcon('pause-button.png'))
        else:
            self.pushButton.setIcon(QtGui.QIcon('play-button.png'))

    def positionChanged(self, position):
        self.horizontalSlider.setValue(position)

    def durationChanged(self, duration):
        self.horizontalSlider.setRange(0, duration)

    def setPosition(self, position):
        self.mediaPlayer.setPosition(position)

    def retranslateUi(self, DebugWindow):
        _translate = QtCore.QCoreApplication.translate
        DebugWindow.setWindowTitle(_translate("DebugWindow", "DebugWindow"))
        self.label.setText(_translate("DebugWindow", "Accuracy:"))
        #self.label_2.setText(_translate("DebugWindow", "TextLabel"))
    

# class cameraThread(QThread):
#     ImageUpdate = pyqtSignal(QImage)
#     def run(self):
#         self.ThreadActive = True
#         Capture = cv2.VideoCapture(0)
#         while self.ThreadActive:
#             ret, frame = Capture.read()
#             if ret:
#                 Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#                 FlippedImage = cv2.flip(Image, 1)
#                 ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
#                 #Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
#                 i = ConvertToQtFormat.copy()
#                 #self.ImageUpdate.emit(ConvertToQtFormat)
#                 self.ImageUpdate.emit(i)
class cameraThread(QThread):
    ImageUpdate = pyqtSignal(QImage)
    accuracyUpdate=pyqtSignal(str)
    def run(self):
        self.ThreadActive = True
        cap = cv2.VideoCapture(0)
        with mt.mp_holistic.Holistic(min_detection_confidence=0.1, min_tracking_confidence=0.1) as holistic:
            while self.ThreadActive:
                ret, frame = cap.read()

                # Make detections
                image, results = mt.mediapipe_detection(frame, holistic)
                #image=cv2.flip(image, 1)
                #print(results)
                
                # Draw landmarks
                mt.draw_styled_landmarks(image, results)
                
                # 2. Prediction logic
                keypoints = mt.extract_keypoints(results)
                mt.sequence.append(keypoints)
                #sequence.reverse()

                sequence = mt.sequence[-mt.no_f:]
                #print(len(sequence))
                sentence=mt.sentence
                if len(sequence) == mt.no_f:

                    #x=np.array(sequence)
                    #x=x.reshape(15,126,1)
                    res = mt.model.predict(np.expand_dims(sequence, axis=0),use_multiprocessing=True)[0] #Work on this side
                    #print(actions[np.argmax(res)],"Gesture")
                    mt.predictions.append(np.argmax(res))
                    
                #3. Viz logic
                    if np.unique(mt.predictions[-30:])[0]==np.argmax(res): 
                        if res[np.argmax(res)] > mt.threshold: 
                            if len(sentence) > 0: 
                                if mt.actions[np.argmax(res)] != sentence[-1]:
                                    sentence.append(mt.actions[np.argmax(res)])
                            else:
                                sentence.append(mt.actions[np.argmax(res)])


                    if len(sentence) > 1: 
                        sentence =[]
                        #print(mt.actions[np.argmax(res)],"Gesture")
                    # Viz probabilities
                    image,accuracy = mt.prob_viz(res, mt.actions, image)
                    
                cv2.rectangle(image, (0,0), (640, 40), (245, 117, 16), -1)
                cv2.putText(image, ' '.join(sentence), (3,30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
                
                # Show to screen
                #cv2.imshow('OpenCV Feed', image)
                #FlippedImage = cv2.flip(image, 1)
                FlippedImage=image
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_BGR888)
                self.ImageUpdate.emit(ConvertToQtFormat)
                try:
                    #print(accuracy)
                    self.accuracyUpdate.emit(accuracy)
                except:
                    pass
                
            
    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    DebugWindow = QtWidgets.QMainWindow()
    ui = Ui_DebugWindow()
    ui.setupUi(DebugWindow)
    DebugWindow.showMaximized()

    sys.exit(app.exec_())
