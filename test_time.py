# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_time.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from datetime import date,datetime

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(462, 208)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 2, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 2, 1, 1)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setMinimumDate(QtCore.QDate(1990, 9, 3))
        self.dateTimeEdit.setCurrentSection(QtWidgets.QDateTimeEdit.MonthSection)
        self.dateTimeEdit.setCalendarPopup(True)
        self.dateTimeEdit.setTimeSpec(QtCore.Qt.LocalTime)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.gridLayout.addWidget(self.dateTimeEdit, 1, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 2, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setEnabled(False)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 462, 21))
        self.menubar.setNativeMenuBar(False)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(False)
        self.statusbar.setSizeGripEnabled(False)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Virtual Sign Teacher"))
        self.pushButton.setText(_translate("MainWindow", "Cancel"))
        self.label.setText(_translate("MainWindow", "Select Start Time and Date"))
        self.pushButton_2.setText(_translate("MainWindow", "Ok"))
        self.pushButton.clicked.connect(self.exit)
        self.pushButton_2.clicked.connect(self.data)

    def exit(self):
        MainWindow.close()
    
    def data(self):
        today=date.today()
        now=datetime.now()
        day,month,year = today.strftime("%d"),today.strftime("%m"),today.strftime("%Y")
        hours,minutes=now.strftime("%H"),now.strftime("%M")
        dt=self.dateTimeEdit.dateTime()
        data_day,data_month,data_year,date_hours,date_minutes = dt.toString('dd'),dt.toString('MM'),dt.toString('yyyy'),dt.toString('hh'),dt.toString('mm')
        if data_year<year:
            popup=QMessageBox()
            popup.setWindowTitle("Assign Tests Date")
            popup.setText("Wrong Year Assigned Are you trying to Time Travel")
            popup.setStandardButtons(QMessageBox.Ok)
            popup.setIcon(QMessageBox.Critical)
            popup.exec_()
        elif data_year>year:
            MainWindow.close()
            print(data_day)
            print(data_month)
            print(data_year)
            print(date_hours)
            print(date_minutes)
        else:
            if data_month<month:
                popup=QMessageBox()
                popup.setWindowTitle("Assign Tests Date")
                popup.setText("Wrong Month Assigned Are you trying to Time Travel")
                popup.setStandardButtons(QMessageBox.Ok)
                popup.setIcon(QMessageBox.Critical)
                popup.exec_()
            elif data_month>month:
                MainWindow.close()
                print(data_day)
                print(data_month)
                print(data_year)
                print(date_hours)
                print(date_minutes)
            else:
                if data_day<day:
                    popup=QMessageBox()
                    popup.setWindowTitle("Assign Tests Date")
                    popup.setText("Wrong Day Assigned Are you Seriously trying to Time Travel")
                    popup.setStandardButtons(QMessageBox.Ok)
                    popup.setIcon(QMessageBox.Critical)
                    popup.exec_()
                elif data_day>day:
                    MainWindow.close()
                    print(data_day)
                    print(data_month)
                    print(data_year)
                    print(date_hours)
                    print(date_minutes)
                else:
                    if date_hours<hours:
                        popup=QMessageBox()
                        popup.setWindowTitle("Assign Tests Date")
                        popup.setText("Wrong Hours Assigned Are you Seriously trying to Time Travel")
                        popup.setStandardButtons(QMessageBox.Ok)
                        popup.setIcon(QMessageBox.Critical)
                        popup.exec_()
                    elif date_hours>hours:
                        MainWindow.close()
                        print(data_day)
                        print(data_month)
                        print(data_year)
                        print(date_hours)
                        print(date_minutes)
                    else:
                        if date_minutes<minutes:
                            popup=QMessageBox()
                            popup.setWindowTitle("Assign Tests Date")
                            popup.setText("Wrong Minutes Assigned Study the Law of Relativity for Time Traveling")
                            popup.setStandardButtons(QMessageBox.Ok)
                            popup.setIcon(QMessageBox.Critical)
                            popup.exec_()
                        elif date_minutes>minutes:
                            MainWindow.close()
                            print(data_day)
                            print(data_month)
                            print(data_year)
                            print(date_hours)
                            print(date_minutes)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon("logo.png"))
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
